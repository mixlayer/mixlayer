syntax = "proto3";

import "google/protobuf/wrappers.proto";

package valence; 

message VLog {  
  VLogLevel level = 1; 
  string target = 2; 
  string message = 3; 
}

enum VLogLevel { 
  LOG_LEVEL_UNKNOWN = 0;
  LOG_LEVEL_TRACE = 1; 
  LOG_LEVEL_DEBUG = 2; 
  LOG_LEVEL_INFO = 3;
  LOG_LEVEL_WARN = 4;
  LOG_LEVEL_ERROR = 5;
}

// defines 
// * connections between node identifiers 
// * metadata for nodes
message VGraphProto { 
  map<uint32, VNodeInfo> metadata = 1;
  repeated VEdgeProto edges = 2;
}

message VNodeInfo { 
  uint32 node_id = 1;
  VNodeTypeProto node_type = 2; 
  string node_operation = 3; 
  google.protobuf.StringValue node_label = 4; 
  string input_type = 5; 
  string output_type = 6; 
}

enum VNodeTypeProto { 
  NODE_TYPE_UNKNOWN = 0; 
  NODE_TYPE_SOURCE = 1; 
  NODE_TYPE_SINK = 2; 
  NODE_TYPE_TRANSFORM = 3;
  NODE_TYPE_JOIN = 4;
}

message VEdgeProto { 
  uint32 source_node_id = 1; 
  uint32 source_output_port = 2; 
  uint32 dest_input_port = 3;
  uint32 dest_node_id = 4; 
}

message VNodeCtxProto { 
  map<uint32, VNodeInputProto> inputs = 1; 
  map<uint32, VNodeOutputProto> outputs = 2; 
}

message VNodeOutputProto { 
  repeated VEdgeProto edges = 1; 
}

message VNodeInputProto { 
  repeated VEdgeProto edges = 1; 
}

message HttpRequestProto { 
    HttpMethodProto method = 1; 
    string url = 2; 
    repeated HttpHeaderProto headers = 3; 

    //TODO should be a stream 
    bytes body = 4; 
}

message HttpResponseProto { 
  int32 statusCode = 1; 
  repeated HttpHeaderProto headers = 2; 
  bytes body = 3; 
}

message HttpHeaderProto { 
  string headerName = 1;
  string headerValue = 2;
}

//TODO add rest
enum HttpMethodProto { 
  HTTP_METHOD_UNKNOWN = 0;
  HTTP_METHOD_GET = 1;
  HTTP_METHOD_POST = 2; 
  HTTP_METHOD_PUT = 3;
  HTTP_METHOD_PATCH = 4;
}


//mixdb ffi api 

message MixDbCreateCollectionProto { 
  string db_name = 1; 
  string collection = 2; 
  string element_type = 3; 
  string id_field = 4; 
}

message MixDbInsertProto { 
  string db_name = 1; 
  string collection = 2; 
  string json = 3; 
}


// Creates a vector index on a collection
message MixDbCreateVectorIndex { 
  string db_name = 1; 
  string collection = 2; 
  int32 dimensions = 3; 
}

// Inserts a vector into the vector index
message MixDbInsertVector { 
  string collection = 1; 
  string index_name = 2; 
  int32 document_id = 3; 
  string chunk_text = 4;
  repeated float vector = 5;
}

message MixDbFinishVectorIndex { 
  string collection = 1; 
}

message CreateEmbeddingRequest { 
  string input = 1; 
  EmbeddingModelProto model = 2;
}

message CreateEmbeddingResponse { 
  repeated float embedding = 1;
}

enum EmbeddingModelProto { 
  UnknownEmbeddingModel = 0;
  OpenAIAda002 = 1; 
}

message ChatCompletionRequest { 
  string prompt = 1; 
  ChatCompletionModelProto model = 2; 
}

message ChatCompletionResponse { 
  string message = 1; 
}

enum ChatCompletionModelProto { 
  UnknownChatCompletionModel = 0; 
  OpenAIGpt4Turbo = 1; 
  OpenAIGpt35Turbo = 2; 
  OpenAIGpt4VisionPreview = 3; 
  OpenAIGpt4 = 4;
}

message BatchChatCompletionRequest { 
  repeated ChatCompletionRequest requests = 1;
}

message BatchChatCompletionResponse { 
  repeated ChatCompletionResponse responses = 1; 
}

message ReadPdfPagesTextRequest { 
  string file = 1; 
}

message ReadPdfPagesTextResponse { 
  repeated ReadPdfPagesPageText pages = 1; 
}

message ReadPdfPagesPageText { 
  uint32 page_number = 1; 
  string text = 2; 
}
